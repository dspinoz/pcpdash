extends container
block container

  .panel.panel-default
    .panel-heading PCP Metrics
    .panel-body
      #metric
  
  script(type='text/javascript').
  
    function redraw(hosts) {
    
      var panels = d3.select('#metric')
        .selectAll('div.panel')
        .data(hosts);
    
      var host_panel = panels.enter()
        .append('div')
        .attr('class', 'panel panel-default');
        
      host_panel
        .append('div')
        .attr('class', 'panel-heading')
        .append('h3')
        .attr('class', 'panel-title')
        .text(function(d) {
          console.log(d);
          return d.host;
        });
        
      var body = host_panel
        .append('div')
        .attr('class', 'panel-body');
        
      var dev_panels = body.selectAll('div.panel')
        .data(function(d) {
          return d.dev;
        });
        
      var dev_panel = dev_panels.enter()
        .append('div')
        .attr('class', 'panel panel-default');
      
      dev_panel.append('div')
        .attr('class', 'panel-heading')
        .append('h3')
        .attr('class', 'panel-title')
        .text(function(d) {
          return d.key;
        });
        
      var info_lists = dev_panel.selectAll('ul.list-group')
        .data(function(d) {
          return d.value.entries();
        });
      
      var info_list = info_lists.enter()
        .append('ul')
        .attr('class', 'list-group');
        
      info_list.append('li')
        .attr('class', 'list-group-item')
        .text(function(d) {
        console.log(d);
        
          var str = " " + d.value[0].time_average + " (" + d.value[0].units + ")";
        
          return d.key + str;
        });
        
    
    }
  
    function getFilesys(info, callback) {
    
      d3.csv('/api/v1/summary/'+info.host+'/filesys', function(json) {
      
        var devices = d3.nest()
                        .key(function(d) {
                          return d.instance;
                        })
                        .key(function(d) {
                          return d.metric;
                        })
                        .map(json, d3.map);
    
        var d = {};
        d.host = info.host;
        d.dev = devices.entries();
        callback(null,d);
      });
    }
  
    function updateData() {
    
      var q = queue();
      
      d3.json('/api/v1/archives', function(json) {
        
        var hosts = d3.nest()
          .key(function (d) {
            return d.host;
          })
          .key(function(d) {
            return d.end;
          })
          .sortKeys(d3.descending)
          .entries(json.archives);
          
        hosts.forEach(function(h) {
          // the first archive for the host, sorted by end time
          var archive = h.values[0].values[0];
          
          q.defer(getFilesys, archive);
        });
          
        q.awaitAll(function(err,res) {
          console.log("DONE " + res.length, res);
          redraw(res);
        });
      });
    
    
    }

    setInterval(updateData, 10000);
    updateData();
